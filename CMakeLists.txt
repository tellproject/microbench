cmake_minimum_required(VERSION 3.0.2)
project(microbenchmark)

# Set CMake modules path
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

find_package(Boost 1.60 REQUIRED COMPONENTS system program_options)
find_package(Crossbow REQUIRED COMPONENTS Logger)
find_package(Jemalloc REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -mcx16")

find_package(Threads)
set(USE_KUDU OFF CACHE BOOL "Build for Kudu")
set(USE_RAMCLOUD OFF CACHE BOOL "Build for RamCloud")
set(USE_TELL ON CACHE BOOL "Build for Tell")

set(COMMON_SRCS common/Common.cpp)
add_library(common ${COMMON_SRCS})
add_definitions( -D_GLIBCXX_USE_CXX11_ABI=0 )

set(CLIENT_SRCS client/main.cpp client/Client.cpp client/sqlite3.c)
add_executable(mbclient ${CLIENT_SRCS})
target_include_directories(mbclient PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(mbclient PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(mbclient PUBLIC ${Crossbow_INCLUDE_DIRS})
target_link_libraries(mbclient ${Boost_LIBRARIES})
target_link_libraries(mbclient ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(mbclient crossbow_logger dl)
target_link_libraries(mbclient common)

if(USE_TELL)
    find_package(TellDB REQUIRED)
    set(TELL_SRCS server/tell/main.cpp)
    add_executable(mbserver_tell ${TELL_SRCS})
    target_include_directories(mbserver_tell PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(mbserver_tell PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(mbserver_tell PUBLIC ${Crossbow_INCLUDE_DIRS})
    target_link_libraries(mbserver_tell PUBLIC ${Boost_LIBRARIES})
    target_link_libraries(mbserver_tell PUBLIC ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(mbserver_tell PUBLIC telldb)
    target_link_libraries(mbserver_tell PUBLIC common)
endif()
if(USE_KUDU)
    set(kuduClient_DIR "/mnt/local/tell/kudu_install/share/kuduClient/cmake")
    find_package(kuduClient REQUIRED)
    message(STATUS "Kudu header found at ${KUDU_CLIENT_INCLUDE_DIR}")

    set(KUDU_SRCS server/kudu/main.cpp)
    add_executable(mbserver_kudu ${KUDU_SRCS})
    target_include_directories(mbserver_kudu PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(mbserver_kudu PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(mbserver_kudu PUBLIC ${Crossbow_INCLUDE_DIRS})
    target_include_directories(mbserver_kudu PRIVATE ${KUDU_CLIENT_INCLUDE_DIR})
    target_link_libraries(mbserver_kudu PRIVATE kudu_client)
    target_link_libraries(mbserver_kudu PUBLIC ${Boost_LIBRARIES})
    target_link_libraries(mbserver_kudu PUBLIC ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(mbserver_kudu PUBLIC common)
    target_link_libraries(mbserver_kudu PUBLIC)
endif()
if(USE_RAMCLOUD)
    # find_package(ramcloud REQUIRED)
    set(ramcloud_DIR "/mnt/local/tell/RAMCloud")

    set(RAMCLOUD_SRCS server/ramcloud/main.cpp)
    add_executable(mbserver_ramcloud ${RAMCLOUD_SRCS})

    target_include_directories(mbserver_ramcloud PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(mbserver_ramcloud PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(mbserver_ramcloud PUBLIC ${Crossbow_INCLUDE_DIRS})
    target_include_directories(mbserver_ramcloud PUBLIC ${ramcloud_DIR}/src ${ramcloud_DIR}/obj.master ${ramcloud_DIR}/gtest/include)
    target_link_libraries(mbserver_ramcloud PUBLIC ${Boost_LIBRARIES})
    target_link_libraries(mbserver_ramcloud PUBLIC ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(mbserver_ramcloud PUBLIC common rt)

    add_library(ramcloud SHARED IMPORTED GLOBAL)
    set_target_properties(ramcloud PROPERTIES IMPORTED_LOCATION ${ramcloud_DIR}/obj.master/libramcloud.so )
    target_link_libraries(mbserver_ramcloud PUBLIC ramcloud)
endif()

