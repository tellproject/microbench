cmake_minimum_required(VERSION 3.0.2)
project(microbenchmark)

# Set CMake modules path
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

find_package(Boost 1.60 REQUIRED COMPONENTS system program_options)
find_package(Crossbow REQUIRED COMPONENTS logger)
find_package(Jemalloc REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -mcx16")

find_package(Threads)
set(USE_KUDU OFF CACHE BOOL "Build for Kudu")
set(USE_TELL ON CACHE BOOL "Build for Tell")

set(CLIENT_SRCS client/main.cpp client/Client.cpp client/sqlite3.c)
add_executable(mbclient ${CLIENT_SRCS})
target_include_directories(mbclient PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(mbclient PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(mbclient PUBLIC ${Crossbow_INCLUDE_DIRS})
target_link_libraries(mbclient ${Boost_LIBRARIES})
target_link_libraries(mbclient ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(mbclient crossbow_logger dl)

if(USE_TELL)
    find_package(TellDB REQUIRED)
    set(TELL_SRCS server/tell/main.cpp)
    add_executable(mbserver_tell ${TELL_SRCS})
    target_include_directories(mbserver_tell PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(mbserver_tell PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(mbserver_tell PUBLIC ${Crossbow_INCLUDE_DIRS})
    target_link_libraries(mbserver_tell PUBLIC ${Boost_LIBRARIES})
    target_link_libraries(mbserver_tell PUBLIC ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(mbserver_tell PUBLIC telldb)
endif()
if(USE_KUDU)
    set(kuduClient_DIR "/mnt/local/tell/kudu_install/share/kuduClient/cmake")
    find_package(kuduClient REQUIRED)
    message(STATUS "Kudu header found at ${KUDU_CLIENT_INCLUDE_DIR}")

    set(KUDU_SRCS server/kudu/main.cpp)
    add_executable(mbserver_kudu ${KUDU_SRCS})
    target_include_directories(mbserver_kudu PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(mbserver_kudu PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(mbserver_kudu PUBLIC ${Crossbow_INCLUDE_DIRS})
    target_include_directories(mbserver_kudu PRIVATE ${KUDU_CLIENT_INCLUDE_DIR})
    target_link_libraries(mbserver_kudu PRIVATE kudu_client)
    target_link_libraries(mbserver_kudu PUBLIC ${Boost_LIBRARIES})
    target_link_libraries(mbserver_kudu PUBLIC ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(mbserver_kudu PUBLIC )
endif()

#set(SRC_KUDU server)
#add_library(mbserver_kudumain server/kudu/Main.cpp)
#target_link_libraries(mbserver_kudumain PRIVATE mbserver)
#
#add_library(mbserver_kudumain server/main_tell.cpp)
#target_link_libraries(mbserver_kudumain PRIVATE server/KuduMain.cpp)

